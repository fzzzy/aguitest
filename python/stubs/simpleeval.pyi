from _typeshed import Incomplete

MAX_STRING_LENGTH: int
MAX_COMPREHENSION_LENGTH: int
MAX_POWER: int
MAX_SHIFT: int
MAX_SHIFT_BASE: Incomplete
DISALLOW_PREFIXES: Incomplete
DISALLOW_METHODS: Incomplete
DISALLOW_FUNCTIONS: Incomplete

class InvalidExpression(Exception): ...

class FunctionNotDefined(InvalidExpression):
    message: Incomplete
    expression: Incomplete
    def __init__(self, func_name, expression) -> None: ...

class NameNotDefined(InvalidExpression):
    name: Incomplete
    message: Incomplete
    expression: Incomplete
    def __init__(self, name, expression) -> None: ...

class AttributeDoesNotExist(InvalidExpression):
    message: Incomplete
    attr: Incomplete
    expression: Incomplete
    def __init__(self, attr, expression) -> None: ...

class OperatorNotDefined(InvalidExpression):
    message: Incomplete
    attr: Incomplete
    expression: Incomplete
    def __init__(self, attr, expression) -> None: ...

class FeatureNotAvailable(InvalidExpression): ...
class NumberTooHigh(InvalidExpression): ...
class IterableTooLong(InvalidExpression): ...
class AssignmentAttempted(UserWarning): ...
class MultipleExpressions(UserWarning): ...

def random_int(top): ...
def safe_power(a, b): ...
def safe_mult(a, b): ...
def safe_add(a, b): ...
def safe_rshift(a, b): ...
def safe_lshift(a, b): ...

DEFAULT_OPERATORS: Incomplete
DEFAULT_FUNCTIONS: Incomplete
DEFAULT_NAMES: Incomplete
ATTR_INDEX_FALLBACK: bool

class SimpleEval:
    expr: str
    operators: Incomplete
    functions: Incomplete
    names: Incomplete
    nodes: Incomplete
    ATTR_INDEX_FALLBACK: Incomplete
    def __init__(self, operators=None, functions=None, names=None) -> None: ...
    def __del__(self) -> None: ...
    @staticmethod
    def parse(expr): ...
    def eval(self, expr, previously_parsed=None): ...

class EvalWithCompoundTypes(SimpleEval):
    def __init__(self, operators=None, functions=None, names=None) -> None: ...
    def eval(self, expr, previously_parsed=None): ...

def simple_eval(expr, operators=None, functions=None, names=None): ...
